from scipy.optimize import linprog

# Define the demand at each node
demand = [400, 80, 40]  # Node 1, Node 2, Node 3

# Define generator capacities and costs
min_capacity = [0, 30, 20, 20, 30]  # Include a dummy generator 0 for easy indexing
max_capacity = [0, 200, 150, 150, 400]
marginal_cost = [0, 15, 12, 10, 8]  # Include dummy cost for generator 0

# Total demand
total_demand = sum(demand)

# Objective function: Minimize the total cost
c = marginal_cost[1:]  # costs for generators A, B, C, D

# Inequality constraints
# - Generator capacity constraints
# x[i] >= min_capacity[i] -> -x[i] <= -min_capacity[i]
# x[i] <= max_capacity[i] ->  x[i] <= max_capacity[i]
A = []
b = []

# Adding capacity constraints for each generator
for i in range(1, 5):
    A.append([-1 if j == i-1 else 0 for j in range(4)])  # For x[i] >= min_capacity[i]
    b.append(-min_capacity[i])
    A.append([1 if j == i-1 else 0 for j in range(4)])   # For x[i] <= max_capacity[i]
    b.append(max_capacity[i])

# Equality constraints: total generation must meet total demand
A_eq = [[1, 1, 1, 1]]  # One constraint for total generation
b_eq = [total_demand]

# Bounds for each variable (all generators must operate within their min and max capacity)
x_bounds = [(0, None) for _ in range(4)]  # No explicit bounds needed as min and max are handled by constraints

# Solve the linear programming problem
result = linprog(c, A_ub=A, b_ub=b, A_eq=A_eq, b_eq=b_eq, bounds=x_bounds, method='highs')

# Extract generator dispatch
dispatch = result.x if result.success else None
dispatch
