import cvxpy as cp
import numpy as np

def dc_opf(bus_data, gen_data, branch_data):
    # Number of buses and generators
    n_bus = bus_data.shape[0]
    n_gen = gen_data.shape[0]
    
    # Create optimization variables
    theta = cp.Variable(n_bus)  # Voltage angles at buses
    Pg = cp.Variable(n_gen)     # Generator power outputs
    
    # Objective: Minimize total generation cost
    cost = cp.sum_squares(Pg)  # Simple quadratic cost function
    
    # Constraints
    constraints = []

    # Power balance constraints
    power_balance = np.zeros(n_bus)
    for i in range(n_gen):
        bus_idx = int(gen_data[i, 0]) - 1  # Generator bus index (assuming bus numbering starts at 1)
        power_balance[bus_idx] += Pg[i]
    
    for i in range(branch_data.shape[0]):
        from_bus = int(branch_data[i, 0]) - 1
        to_bus = int(branch_data[i, 1]) - 1
        x = branch_data[i, 2]  # Branch reactance
        power_flow = (theta[from_bus] - theta[to_bus]) / x
        power_balance[from_bus] -= power_flow
        power_balance[to_bus] += power_flow
    
    constraints.append(power_balance == 0)
    
    # Generator limits
    for i in range(n_gen):
        constraints.append(Pg[i] >= gen_data[i, 1])  # Minimum generation limit
        constraints.append(Pg[i] <= gen_data[i, 2])  # Maximum generation limit
    
    # Solve the problem
    prob = cp.Problem(cp.Minimize(cost), constraints)
    prob.solve()

    return theta.value, Pg.value

# Example data
bus_data = np.array([
    # Bus ID
    [1],
    [2],
    [3]
])

gen_data = np.array([
    # Bus ID, Pmin, Pmax
    [1, 10, 50],
    [3, 10, 50]
])

branch_data = np.array([
    # From Bus, To Bus, Reactance
    [1, 2, 0.1],
    [2, 3, 0.1],
    [3, 1, 0.1]
])

theta_opt, Pg_opt = dc_opf(bus_data, gen_data, branch_data)
print("Optimal Voltage Angles (Radians):", theta_opt)
print("Optimal Generation Outputs (MW):", Pg_opt)
