import numpy as np

def dc_power_flow(B, P, slack_bus_index):
    """
    Solve the DC power flow equations.

    Parameters:
    B : numpy.array
        Susceptance matrix (B matrix), should be square and symmetric.
    P : numpy.array
        Power injection vector where the value at each index corresponds to net power injection at that bus.
    slack_bus_index : int
        Index of the slack bus. This bus will have a voltage angle of 0 and is not included in the matrix calculations.

    Returns:
    theta : numpy.array
        Voltage angles at each bus in radians.
    """
    # Number of buses
    num_buses = B.shape[0]

    # Ensure the matrix B and vector P are correctly sized
    if B.shape[1] != num_buses or len(P) != num_buses:
        raise ValueError("Dimension mismatch between B matrix and P vector.")

    # Remove the slack bus row and column from B matrix
    B_reduced = np.delete(np.delete(B, slack_bus_index, axis=0), slack_bus_index, axis=1)

    # Remove the slack bus from power vector
    P_reduced = np.delete(P, slack_bus_index)

    # Solve for the voltage angles (theta)
    # theta_reduced = B_reduced_inv * P_reduced
    theta_reduced = np.linalg.solve(B_reduced, P_reduced)

    # Insert the slack bus angle (0 radians) into the solution vector
    theta = np.insert(theta_reduced, slack_bus_index, 0)

    return theta

# Example usage:
# Define the B matrix and P vector
B = np.array([[3, -1, -1, -1],
              [-1, 4, -1, -1],
              [-1, -1, 4, -1],
              [-1, -1, -1, 3]])

P = np.array([1, -1, 0, 0])

# Specify the slack bus index
slack_bus_index = 0

# Calculate voltage angles
theta = dc_power_flow(B, P, slack_bus_index)
print("Voltage angles (in radians):", theta)
